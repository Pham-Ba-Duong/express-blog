<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Posts</title>
    <link
      rel="shortcut icon"
      href="/asset-admin/img/svg/logo.svg"
      type="image/x-icon"
    />
    <link rel="stylesheet" href="/asset-admin/css/style.css" />
  </head>

  <body>
    <div class="layer"></div>
    <!-- ! Body -->
    <a class="skip-link sr-only" href="#skip-target">Skip to content</a>
    <div class="page-flex">
      <!-- ! Sidebar -->
      <%- include('./partials/sidebar-admin')%>
      <div class="main-wrapper">
        <!-- ! Header -->
        <header><%- include('./partials/header-admin')%></header>
        <!-- ! Main -->
        <div>
          <h2 class="main-title">Blog Posts</h2>
          <a href="/admin/manage-post/create">
            <button class="button-btn">New Post</button>
          </a>

          <div class="users-table table-wrapper">
            <table class="posts-table">
              <thead>
                <tr class="users-table-info">
                  <th>Thumbnail</th>
                  <th>Title</th>
                  <th>Category</th>
                  <th>Date</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody id="list-post-admin">
                <!-- <tr>
                  <td>
                    <label class="users-table__checkbox">
                      <input type="checkbox" class="check" />
                      <div class="categories-table-img">
                        <picture>
                          <img
                            src="/asset-admin/img/categories/01.jpg"
                            alt="category"
                          />
                      </picture>
                      </div>
                    </label>
                  </td>
                  <td>AAA</td>
                  <td><span class="badge-pending">Pending</span></td>
                  <td>11</td>
                  <td>
                   <a href="" id="edit" data-id=${item._id}><button class="btn btn-edit">Edit</button></a> | 
                   <a href="" id="delete" data-id=${item._id}><button class="btn btn-delete">Delete</button> </a>
                  </td>
                </tr> -->
              </tbody>
            </table>
          </div>

          <div class="table-wrapper">
            <ul class="pagination justify-content-start">
              <!-- <li class="page-item">
                      <a class="page-link"  id="prev-btn" href="#">Next</a>
                  </li>

                  <li class="page-item">
                    <a class="page-link" id="page-info">Page 1</a>
                  </li>

                  <li class="page-item">
                      <a class="page-link" id="next-btn" href="#">Previous</a>
                  </li> -->
            </ul>
          </div>
          <!-- end row -->
        </div>
        <!-- ! Footer -->
        <footer class="footer"><%- include('./partials/footer-admin')%></footer>
      </div>
    </div>
    <!-- Chart library -->
    <script src="/asset-admin/plugins/chart.min.js"></script>
    <!-- Icons library -->
    <script src="/asset-admin/plugins/feather.min.js"></script>
    <!-- Custom scripts -->
    <script src="/asset-admin/js/script.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        getPostListDataAdmin();
        getCategoryById();
      });

      const getPostListDataAdmin = async (page, limit) => {
        try {
          const postApi = `http://localhost:8000/v1/post-page?page=${page}`;
          const response = await fetch(postApi);
          const data = await response.json();
          const posts = data.posts;
          const totalPages = data.totalPages;
          const currentPage = data.currentPage;

          // Chạy qua các postItem và lấy thông tin category
          const htmlPostAdmin = await Promise.all(
            posts.map(async (item) => {
              const createdAt = new Date(item.createdAt).toLocaleDateString();
              let image = item.image
                ? item.image.replace("assets\\", "\\")
                : "";

              let categoryName = "Unknown Category";
              if (item.category) {
                categoryName = await getCategoryById(item.category);
              }

              return `
                <tr id="trow_${item._id}">
                  <td>
                    <label class="users-table__checkbox">
                      <div class="categories-table-img">
                        <picture>
                          <img
                            src="${image}"
                            alt="category"
                          />
                        </picture>
                      </div>
                    </label>
                  </td>
                  <td>${item.title}</td>
                  <td id="category-name-${item._id}">${categoryName}</td>
                  <td>${createdAt}</td>
                  <td>
                    <a href="/post/update/${item._id}" id="edit" data-id="${item._id}"><button class="btn btn-edit">Edit</button></a> | 
                    <a href="" id="delete" data-id="${item._id}"><button class="btn btn-delete">Delete</button> </a>
                  </td>
                </tr>
              `;
            })
          );

          document.querySelector("#list-post-admin").innerHTML = htmlPostAdmin;

          // Click update
          document.querySelectorAll(".btn-edit").forEach((button) => {
            button.addEventListener("click", (e) => {
              const postId = e.target.closest("a").getAttribute("data-id");
              if (postId) {
                window.location.href = `/post/update/${postId}`;
              }
            });
          });

          // Click delete
          document.querySelectorAll(".btn-delete").forEach((button) => {
            button.addEventListener("click", async (e) => {
              const postId = e.target.closest("a").getAttribute("data-id");
              if (!postId) {
                alert("Invalid post ID.");
                return;
              }
              await deletePost(postId);
            });
          });

          // renderPagination(currentPage, totalPages);
        } catch (error) {
          console.error("Error fetching category data:", error);
        }
      };

      // Hàm lấy tên category theo id
      const getCategoryById = async (categoryId) => {
        try {
          if (
            !categoryId ||
            typeof categoryId !== "string" ||
            categoryId.trim() === ""
          ) {
            console.error("Invalid categoryId:", categoryId);
            return "Unknown Category";
          }

          const postApi = `http://localhost:8000/category/${categoryId}`;
          const response = await fetch(postApi);
          console.log(response);

          // Kiểm tra API
          const text = await response.text();
          if (text.startsWith("<!DOCTYPE html>")) {
            throw new Error("API returned HTML instead of JSON");
          }

          const data = JSON.parse(text);
          if (data && data.name) {
            return data.name;
          } else {
            return "Unknown Category";
          }
        } catch (error) {
          console.error("Error fetching category:", error);
          return "Error fetching category";
        }
      };

      //Render phân trang cùng Posts
      const renderPagination = (currentPage, totalPages) => {
        const paginationContainer = document.querySelector(".pagination");
        paginationContainer.innerHTML = ""; // Xóa nội dung phân trang cũ trước khi tạo lại

        // Tạo nút "Previous"
        if (currentPage > 1) {
          const prevPage = document.createElement("li");
          prevPage.className = "page-item";
          prevPage.innerHTML = `<a class="page-link" href="#" data-page="${
            currentPage - 1
          }">Previous</a>`;
          paginationContainer.appendChild(prevPage);
        }

        // Tạo các nút trang
        for (let i = 1; i <= totalPages; i++) {
          const pageItem = document.createElement("li");
          pageItem.className = `page-item ${i === currentPage ? "active" : ""}`;
          pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
          paginationContainer.appendChild(pageItem);
        }

        // Tạo nút "Next"
        if (currentPage < totalPages) {
          const nextPage = document.createElement("li");
          nextPage.className = "page-item";
          nextPage.innerHTML = `<a class="page-link" href="#" data-page="${
            currentPage + 1
          }">Next</a>`;
          paginationContainer.appendChild(nextPage);
        }

        // Lắng nghe sự kiện click vào các trang
        document.querySelectorAll(".pagination .page-item").forEach((link) => {
          link.addEventListener("click", (event) => {
            event.preventDefault();
            const page = parseInt(event.target.dataset.page);
            getPostListDataAdmin(page);
          });
        });
      };

      //Hàm delete post
      const deletePost = async (postId) => {
        try {
          const confirmDelete = confirm(
            "Are you sure you want to delete this post?"
          );
          if (!confirmDelete) return;

          const response = await fetch(`/post/delete/${postId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            document.getElementById(`trow_${postId}`).remove();
            alert("Post deleted successfully!");
          } else {
            alert("Failed to delete post.");
          }
        } catch (error) {
          console.error("Error deleting post:", error);
          alert("Error deleting post.");
        }
      };
    </script>
  </body>
</html>
